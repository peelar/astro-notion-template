---
import type { NotionColor, Text } from "../../blocks";

const colorMap: Record<
  NotionColor,
  { color: string; backgroundColor: string }
> = {
  default: { color: "black", backgroundColor: "inherit" },
  gray: { color: "gray", backgroundColor: "inherit" },
  brown: { color: "brown", backgroundColor: "inherit" },
  orange: { color: "orange", backgroundColor: "inherit" },
  yellow: { color: "yellow", backgroundColor: "inherit" },
  green: { color: "green", backgroundColor: "inherit" },
  blue: { color: "blue", backgroundColor: "inherit" },
  purple: { color: "purple", backgroundColor: "inherit" },
  pink: { color: "pink", backgroundColor: "inherit" },
  red: { color: "red", backgroundColor: "inherit" },
  gray_background: { color: "white", backgroundColor: "gray" },
  brown_background: { color: "white", backgroundColor: "brown" },
  orange_background: { color: "white", backgroundColor: "orange" },
  yellow_background: { color: "white", backgroundColor: "yellow" },
  green_background: { color: "white", backgroundColor: "green" },
  blue_background: { color: "white", backgroundColor: "blue" },
  purple_background: { color: "white", backgroundColor: "purple" },
  pink_background: { color: "white", backgroundColor: "pink" },
  red_background: { color: "white", backgroundColor: "red" },
};

const matchStylePropsToStyles = (text: Text) => {
  const styles = text.style;
  const styleProps = {
    color: colorMap[styles.color].color,
    backgroundColor: colorMap[styles.color].backgroundColor,
    fontWeight: styles.bold ? "bold" : "normal",
    fontStyle: styles.italic ? "italic" : "normal",
    textDecoration: styles.strikethrough
      ? "line-through"
      : styles.underline
      ? "underline"
      : "none",
  };

  return styleProps;
};

type Props = Text;

const text = Astro.props;
const styleProps = matchStylePropsToStyles(text);
---

<!-- todo: figure out why I get unexpected return when using this component -->
<span style={styleProps}>{text.content}</span>;
