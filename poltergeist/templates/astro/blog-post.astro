---
import type { NotionColor, Text as TText } from "../../blocks";
import type { BlogPost } from "../../blog";

const colorMap: Record<
  NotionColor,
  { color: string; backgroundColor: string }
> = {
  default: { color: "black", backgroundColor: "inherit" },
  gray: { color: "gray", backgroundColor: "inherit" },
  brown: { color: "brown", backgroundColor: "inherit" },
  orange: { color: "orange", backgroundColor: "inherit" },
  yellow: { color: "yellow", backgroundColor: "inherit" },
  green: { color: "green", backgroundColor: "inherit" },
  blue: { color: "blue", backgroundColor: "inherit" },
  purple: { color: "purple", backgroundColor: "inherit" },
  pink: { color: "pink", backgroundColor: "inherit" },
  red: { color: "red", backgroundColor: "inherit" },
  gray_background: { color: "white", backgroundColor: "gray" },
  brown_background: { color: "white", backgroundColor: "brown" },
  orange_background: { color: "white", backgroundColor: "orange" },
  yellow_background: { color: "white", backgroundColor: "yellow" },
  green_background: { color: "white", backgroundColor: "green" },
  blue_background: { color: "white", backgroundColor: "blue" },
  purple_background: { color: "white", backgroundColor: "purple" },
  pink_background: { color: "white", backgroundColor: "pink" },
  red_background: { color: "white", backgroundColor: "red" },
};

const matchStylePropsToStyles = (text: TText) => {
  const styles = text.style;
  const styleProps = {
    color: colorMap[styles.color].color,
    backgroundColor: colorMap[styles.color].backgroundColor,
    fontWeight: styles.bold ? "bold" : "normal",
    fontStyle: styles.italic ? "italic" : "normal",
    textDecoration: styles.strikethrough
      ? "line-through"
      : styles.underline
      ? "underline"
      : "none",
  };

  return styleProps;
};

type Props = {
  post: BlogPost;
};

const { blocks, title } = Astro.props.post;
---

<article>
  <h1>{title}</h1>
  {
    blocks.map((block) => {
      if (block.type === "text") {
        const styleProps = matchStylePropsToStyles(block);
        return <p style={styleProps}>{block.content}</p>;
      }

      if (block.type === "heading" && block.level === 1) {
        return (
          <h1>
            {block.richText.content.map((text) => {
              const styleProps = matchStylePropsToStyles(text);

              return <span style={styleProps}>{text.content}</span>;
            })}
          </h1>
        );
      }

      if (block.type === "heading" && block.level === 2) {
        return (
          <h2>
            {block.richText.content.map((text) => {
              const styleProps = matchStylePropsToStyles(text);

              return <span style={styleProps}>{text.content}</span>;
            })}
          </h2>
        );
      }

      if (block.type === "heading" && block.level === 3) {
        return (
          <h3>
            {block.richText.content.map((text) => {
              const styleProps = matchStylePropsToStyles(text);

              return <span style={styleProps}>{text.content}</span>;
            })}
          </h3>
        );
      }

      if (block.type === "unorderedList") {
        return (
          <ul>
            {block.items.map((listItem) => {
              return (
                <li>
                  {listItem.richText.content.map((text) => {
                    const styleProps = matchStylePropsToStyles(text);
                    return <span style={styleProps}>{text.content}</span>;
                  })}
                </li>
              );
            })}
          </ul>
        );
      }

      if (block.type === "orderedList") {
        return (
          <ol>
            {block.items.map((listItem) => {
              return (
                <li>
                  {listItem.richText.content.map((text) => {
                    const styleProps = matchStylePropsToStyles(text);
                    return <span style={styleProps}>{text.content}</span>;
                  })}
                </li>
              );
            })}
          </ol>
        );
      }

      if (block.type === "todoList") {
        return (
          <ul>
            {block.items.map((listItem) => {
              return (
                <li
                  style={{
                    textDecoration: listItem.checked
                      ? "line-through"
                      : "initial",
                  }}
                >
                  {listItem.richText.content.map((text) => {
                    const styleProps = matchStylePropsToStyles(text);
                    return <span style={styleProps}>{text.content}</span>;
                  })}
                </li>
              );
            })}
          </ul>
        );
      }

      // https://github.com/withastro/compiler/issues/739
      if (block.type === "divider") {
        return <div>Divider</div>;
      }

      if (block.type === "break") {
        // https://github.com/withastro/compiler/issues/739
        return <div>Break</div>;
      }

      if (block.type === "image") {
        // https://github.com/withastro/compiler/issues/739
        return <div>Image</div>;
        // return <img src={block.url} alt={block.caption} />;
      }

      if (block.type === "richText") {
        return (
          <p>
            {block.content.map((text) => {
              const richTextStyles = matchStylePropsToStyles(text);
              return <span style={richTextStyles}>{text.content}</span>;
            })}
          </p>
        );
      }
    })
  }
</article>
