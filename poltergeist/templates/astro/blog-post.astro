---
import type { BlogPost } from "../../blog";
import { matchStylePropsToStyles } from "../../styles";
import "../../themes/notion.css";

type Props = {
  post: BlogPost;
};

const { blocks, title } = Astro.props.post;
---

<article>
  <h1>{title}</h1>
  {
    blocks.map((block) => {
      if (block.type === "text") {
        const styleProps = matchStylePropsToStyles(block);
        return <p class={styleProps}>{block.content}</p>;
      }

      if (block.type === "heading" && block.level === 1) {
        return (
          <h1>
            {block.richText.content.map((text) => {
              const styleProps = matchStylePropsToStyles(text);

              return <span class={styleProps}>{text.content}</span>;
            })}
          </h1>
        );
      }

      if (block.type === "heading" && block.level === 2) {
        return (
          <h2>
            {block.richText.content.map((text) => {
              const styleProps = matchStylePropsToStyles(text);

              return <span class={styleProps}>{text.content}</span>;
            })}
          </h2>
        );
      }

      if (block.type === "heading" && block.level === 3) {
        return (
          <h3>
            {block.richText.content.map((text) => {
              const styleProps = matchStylePropsToStyles(text);

              return <span class={styleProps}>{text.content}</span>;
            })}
          </h3>
        );
      }

      if (block.type === "unorderedList") {
        return (
          <ul>
            {block.items.map((listItem) => {
              return (
                <li>
                  {listItem.richText.content.map((text) => {
                    const styleProps = matchStylePropsToStyles(text);
                    return <span class={styleProps}>{text.content}</span>;
                  })}
                </li>
              );
            })}
          </ul>
        );
      }

      if (block.type === "orderedList") {
        return (
          <ol>
            {block.items.map((listItem) => {
              return (
                <li>
                  {listItem.richText.content.map((text) => {
                    const styleProps = matchStylePropsToStyles(text);
                    return <span class={styleProps}>{text.content}</span>;
                  })}
                </li>
              );
            })}
          </ol>
        );
      }

      if (block.type === "todoList") {
        return (
          <ul>
            {block.items.map((listItem) => {
              return (
                <li
                  style={{
                    textDecoration: listItem.checked
                      ? "line-through"
                      : "initial",
                  }}
                >
                  {listItem.richText.content.map((text) => {
                    const styleProps = matchStylePropsToStyles(text);
                    return <span class={styleProps}>{text.content}</span>;
                  })}
                </li>
              );
            })}
          </ul>
        );
      }

      // https://github.com/withastro/compiler/issues/739
      if (block.type === "divider") {
        return <div>Divider</div>;
      }

      if (block.type === "break") {
        // https://github.com/withastro/compiler/issues/739
        return <div>Break</div>;
      }

      if (block.type === "image") {
        // https://github.com/withastro/compiler/issues/739
        return <div>Image</div>;
        // return <img src={block.url} alt={block.caption} />;
      }

      if (block.type === "richText") {
        return (
          <p>
            {block.content.map((text) => {
              const richTextStyles = matchStylePropsToStyles(text);
              return <span class={richTextStyles}>{text.content}</span>;
            })}
          </p>
        );
      }
    })
  }
</article>
